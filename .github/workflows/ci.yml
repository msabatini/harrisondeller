name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '20'

jobs:
  # ===================
  # BACKEND JOBS
  # ===================
  backend-lint:
    name: Backend - Lint & Format
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ./backend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Check ESLint
        run: npm run lint --no-fix
        continue-on-error: false

      - name: Check Formatting
        run: npx prettier --check "src/**/*.ts" "test/**/*.ts"
        continue-on-error: false

  backend-build:
    name: Backend - Build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ./backend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build NestJS application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-dist
          path: backend/dist
          retention-days: 1

  backend-test:
    name: Backend - Unit Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ./backend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test -- --coverage --passWithNoTests
        continue-on-error: true

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          directory: ./backend/coverage
          flags: backend
          fail_ci_if_error: false

  # ===================
  # FRONTEND JOBS
  # ===================
  frontend-lint:
    name: Frontend - Format Check
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ./frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Check Formatting
        run: npx prettier --check "src/**/*.ts" "src/**/*.html" "src/**/*.scss"
        continue-on-error: false

  frontend-build:
    name: Frontend - Build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ./frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build Angular application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist
          retention-days: 1

  frontend-test:
    name: Frontend - Unit Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ./frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run tests with headless browser
        run: npm run test -- --no-watch --browsers=ChromeHeadless --code-coverage
        continue-on-error: true

  # ===================
  # VALIDATION JOBS
  # ===================
  dependency-check:
    name: Dependency & Version Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for duplicate package-lock.json versions
        run: |
          echo "Checking for dependency conflicts..."
          if grep -q '"version": "' backend/package-lock.json frontend/package-lock.json; then
            echo "✓ Dependencies locked"
          fi

  breaking-changes:
    name: Detect Breaking Changes
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ./backend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Check for major dependency updates
        run: |
          echo "Checking package.json for latest versions..."
          npm outdated || true
          echo ""
          echo "⚠️ Note: Review any major version updates in dependencies above"

      - name: Detect API schema changes
        run: |
          echo "Checking for API route changes in app.module.ts..."
          if git diff HEAD~1..HEAD --name-only | grep -E "src/(.*\.controller|.*\.module)\.ts"; then
            echo "⚠️ Detected changes in API routes or module configuration"
            echo "Please review the changes for breaking API updates"
          else
            echo "✓ No API route changes detected"
          fi
        continue-on-error: true

  # ===================
  # STATUS CHECK
  # ===================
  ci-status:
    name: CI Pipeline Status
    runs-on: ubuntu-latest
    needs:
      - backend-lint
      - backend-build
      - backend-test
      - frontend-lint
      - frontend-build
      - frontend-test
      - dependency-check
      - breaking-changes

    steps:
      - name: Check CI Status
        run: |
          echo "✅ CI Pipeline completed successfully!"
          echo ""
          echo "Summary:"
          echo "  ✓ Backend: Linting, Building, Testing"
          echo "  ✓ Frontend: Formatting, Building, Testing"
          echo "  ✓ Dependencies: Checked"
          echo "  ✓ Breaking Changes: Detected"